import torch

TENSOR = torch.tensor([1,2,3])
TENSOR
tensor([1, 2, 3])

t = torch.tensor([[1,1,1,1],[2,2,2,2],[3,3,3,3]])
t.reshape([2,6])
tensor([[1, 1, 1, 1, 2, 2],
        [2, 2, 3, 3, 3, 3]])

t1 = torch.tensor([[3,3,3,3],[2,2,2,2],[1,1,1,1]])
t2 = torch.stack((t,t1))
t2
tensor([[[1, 1, 1, 1],
         [2, 2, 2, 2],
         [3, 3, 3, 3]],
        [[3, 3, 3, 3],
         [2, 2, 2, 2],
         [1, 1, 1, 1]]])
         
print(t.reshape([1,12]).squeeze())
tensor([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])

print(t.reshape([1,12]).squeeze().unsqueeze(dim=0))
tensor([[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]])


t1.permute(-2, 1) 
tensor([[3, 3, 3, 3],
        [2, 2, 2, 2],
        [1, 1, 1, 1]])
        
t[0]
tensor([1, 1, 1, 1])

t[0][0]
tensor(1)

t.numpy()
array([[1, 1, 1, 1],
       [2, 2, 2, 2],
       [3, 3, 3, 3]])
       
t
tensor([[1, 1, 1, 1],
        [2, 2, 2, 2],
        [3, 3, 3, 3]])
        
a1 = t.numpy()
tensor1 = torch.from_numpy(a1)
tensor1
tensor([[1, 1, 1, 1],
        [2, 2, 2, 2],
        [3, 3, 3, 3]])
        
r1 = torch.rand(size=(7,7))
r1
tensor([[0.3870, 0.4352, 0.0015, 0.3131, 0.1883, 0.4492, 0.2795],
        [0.4375, 0.5868, 0.0082, 0.1438, 0.6135, 0.5599, 0.7242],
        [0.0698, 0.1338, 0.0406, 0.3036, 0.5612, 0.1623, 0.9809],
        [0.7878, 0.3611, 0.6511, 0.9803, 0.2589, 0.2912, 0.4876],
        [0.3319, 0.6427, 0.7781, 0.1468, 0.8010, 0.3475, 0.0605],
        [0.8904, 0.5336, 0.6486, 0.4607, 0.3960, 0.0719, 0.2976],
        [0.6811, 0.1727, 0.4492, 0.6514, 0.3016, 0.3842, 0.4860]])
        
t1
tensor([[3, 3, 3, 3],
        [2, 2, 2, 2],
        [1, 1, 1, 1]])
        
t1.permute(1,0)
tensor([[3, 2, 1],
        [3, 2, 1],
        [3, 2, 1],
        [3, 2, 1]])
        
r2 = torch.rand(size=(1,7))
r2.permute(1,0)
tensor([[0.6317],
        [0.2475],
        [0.2088],
        [0.0470],
        [0.3932],
        [0.4858],
        [0.8672]])
        
r2 = r2.permute(1,0)
r1 @ r2
tensor([[0.9018],
        [1.5713],
        [1.2500],
        [1.4352],
        [1.0743],
        [1.3002],
        [1.3241]])
        
e1 = torch.rand(size=(2,3))
e2 = torch.rand(size=(2,3))
t1.device
device(type='cpu')

device = "cuda" if torch.cuda.is_available() else "cpu"
t1.device
device(type='cpu')

tgpu = t1.to(device)
tgpu
tensor([[3, 3, 3, 3],
        [2, 2, 2, 2],
        [1, 1, 1, 1]], device='cuda:0')
        
r3 = r1 @ r2
r3 @ r3.permute(1,0)
tensor([[0.8132, 1.4170, 1.1273, 1.2942, 0.9688, 1.1725, 1.1940],
        [1.4170, 2.4690, 1.9642, 2.2551, 1.6881, 2.0431, 2.0806],
        [1.1273, 1.9642, 1.5626, 1.7940, 1.3430, 1.6253, 1.6552],
        [1.2942, 2.2551, 1.7940, 2.0597, 1.5418, 1.8660, 1.9003],
        [0.9688, 1.6881, 1.3430, 1.5418, 1.1542, 1.3969, 1.4225],
        [1.1725, 2.0431, 1.6253, 1.8660, 1.3969, 1.6906, 1.7216],
        [1.1940, 2.0806, 1.6552, 1.9003, 1.4225, 1.7216, 1.7532]])
        
e1.max()
tensor(0.9854)

e2.min()
tensor(0.2468)

e1.argmin()
tensor(5)

e2.argmax()
tensor(0)

torch.manual_seed(7)
<torch._C.Generator object at 0x7f5514940cb0>

rt = torch.rand(size=(1,1,1,10))
rt2 = rt.squeeze()
rt
tensor([[[[0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297,
           0.3653, 0.8513]]]])
           
rt.shape
torch.Size([1, 1, 1, 10])

rt2
tensor([0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297, 0.3653,
        0.8513])
        
rt2.shape
torch.Size([10])

